{"version":3,"sources":["assets/github-logo.svg","utils/constants.js","Components/LoadingIndicator/index.js","Components/SelectCharacter/index.js","Components/Arena/index.js","App.js","index.js"],"names":["CONTRACT_ADDRESS","transformCharacterData","characterData","name","imageURI","hp","toNumber","maxHp","attackDamage","LoadingIndicator","className","SelectCharacter","setCharacterNFT","useState","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","useEffect","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","metaverseSlayerGame","abi","console","log","getCharacters","a","getAllDefaultCharacters","charactersTxn","map","error","onCharacterMint","sender","tokenId","characterIndex","checkIfUserHasNFT","characterNFT","alert","on","off","length","character","index","src","alt","type","onClick","characterId","mintCharacterNFT","mintTxn","wait","warn","Arena","boss","setBoss","attackState","setAttackState","showToast","setShowToast","runAttackAction","attackBoss","attackTxn","setTimeout","fetchBoss","getBigBoss","bossTxn","onAttackComplete","newBossHp","newPlayerHp","bossHp","playerHp","prevState","id","value","max","GITHUB_HANDLE","GITHUB_LINK","App","currentAccount","setCurrentAccount","isLoading","setIsLoading","checkIfWalletIsConnected","request","method","accounts","account","connectWalletAction","fetchNFTMetadata","provider","txn","githubLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21a14d62.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/github-logo.47824d0e.svg\";","const CONTRACT_ADDRESS = '0x99Ce98EA0B609aE3F6e21F955d49b287348DC8E5';\n\nconst transformCharacterData = (characterData) => {\n  return {\n    name: characterData.name,\n    imageURI: characterData.imageURI,\n    hp: characterData.hp.toNumber(),\n    maxHp: characterData.maxHp.toNumber(),\n    attackDamage: characterData.attackDamage.toNumber(),\n  };\n};\n  \nexport { CONTRACT_ADDRESS, transformCharacterData };\n","import React from 'react';\nimport './LoadingIndicator.css';\n\nconst LoadingIndicator = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n","import React, { useEffect, useState } from 'react';\nimport './SelectCharacter.css';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../utils/constants';\nimport metaverseSlayerGame from '../../utils/MetaverseSlayerGame.json';\nimport LoadingIndicator from '../LoadingIndicator';\n\nconst SelectCharacter = ({ setCharacterNFT }) => {\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null);\n  const [mintingCharacter, setMintingCharacter] = useState(false);\n  \n  // Actions\n  const mintCharacterNFTAction = (characterId) => async () => {\n    try {\n      if (gameContract) {\n        /*\n        * Show our loading indicator\n        */\n        setMintingCharacter(true);\n        console.log('Minting character in progress...');\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\n        await mintTxn.wait();\n        console.log('mintTxn:', mintTxn);\n        /*\n        * Hide our loading indicator when minting is finished\n        */\n        setMintingCharacter(false);\n      }\n    } catch (error) {\n      console.warn('MintCharacterAction Error:', error);\n      /*\n      * If there is a problem, hide the loading indicator as well\n      */\n      setMintingCharacter(false);\n    }\n  };\n\n  // UseEffect\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        metaverseSlayerGame.abi,\n        signer\n      );\n\n      /*\n      * This is the big difference. Set our gameContract in state.\n      */\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []);\n\n  useEffect(() => {\n    const getCharacters = async () => {\n      try {\n        console.log('Getting contract characters to mint');\n  \n        /*\n         * Call contract to get all mint-able characters\n         */\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n        console.log('charactersTxn:', charactersTxn);\n  \n        /*\n         * Go through all of our characters and transform the data\n         */\n        const characters = charactersTxn.map((characterData) =>\n          transformCharacterData(characterData)\n        );\n  \n        /*\n         * Set all mint-able characters in state\n         */\n        setCharacters(characters);\n      } catch (error) {\n        console.error('Something went wrong fetching characters:', error);\n      }\n    };\n  \n    /*\n    * Add a callback method that will fire when this event is received\n    */\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\n      console.log(\n        `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n      );\n\n      /*\n      * Once our character NFT is minted we can fetch the metadata from our contract\n      * and set it in state to move onto the Arena\n      */\n      if (gameContract) {\n        const characterNFT = await gameContract.checkIfUserHasNFT();\n        console.log('CharacterNFT: ', characterNFT);\n        setCharacterNFT(transformCharacterData(characterNFT));\n        alert(`Your NFT is all done -- see it here: https://testnets.opensea.io/assets/${gameContract}/${tokenId.toNumber()}`)\n      }\n    };\n    /*\n     * If our gameContract is ready, let's get characters!\n     */\n    if (gameContract) {\n      getCharacters();\n      /*\n      * Setup NFT Minted Listener\n      */\n      gameContract.on('CharacterNFTMinted', onCharacterMint);\n    }\n    return () => {\n      /*\n       * When your component unmounts, let's make sure to clean up this listener\n       */\n      if (gameContract) {\n        gameContract.off('CharacterNFTMinted', onCharacterMint);\n      }\n    };  \n  }, [gameContract]);  \n\n  // Render Methods\n  const renderCharacters = () =>\n    characters.map((character, index) => (\n      <div className=\"character-item\" key={character.name}>\n        <div className=\"name-container\">\n          <p>{character.name}</p>\n        </div>\n        <img src={character.imageURI} alt={character.name} />\n        <button\n          type=\"button\"\n          className=\"character-mint-button\"\n          onClick={mintCharacterNFTAction(index)}\n        >{`Mint ${character.name}`}</button>\n      </div>\n    ));\n\n  return (\n    <div className=\"select-character-container\">\n      <h2>Mint Your Hero. Choose wisely.</h2>\n      {/* Only show this when there are characters in state */}\n      {characters.length > 0 && (\n        <div className=\"character-grid\">{renderCharacters()}</div>\n      )}\n      {/* Only show our loading state if mintingCharacter is true */}\n      {mintingCharacter && (\n        <div className=\"loading\">\n          <div className=\"indicator\">\n            <LoadingIndicator />\n            <p>Minting In Progress...</p>\n          </div>\n          <img\n            src=\"https://media2.giphy.com/media/61tYloUgq1eOk/giphy.gif?cid=ecf05e47dg95zbpabxhmhaksvoy8h526f96k4em0ndvx078s&rid=giphy.gif&ct=g\"\n            alt=\"Minting loading indicator\"\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SelectCharacter;\n","import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../utils/constants';\nimport metaverseSlayerGame from '../../utils/MetaverseSlayerGame.json';\nimport './Arena.css';\nimport LoadingIndicator from '../LoadingIndicator';\n\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\n  // State\n  const [gameContract, setGameContract] = useState(null);\n  const [boss, setBoss] = useState(null);\n  const [attackState, setAttackState] = useState('');\n  const [showToast, setShowToast] = useState(false);\n\n  // Actions\n  const runAttackAction = async () => {\n    try {\n      if (gameContract) {\n        setAttackState('attacking');\n        console.log('Attacking boss...');\n        const attackTxn = await gameContract.attackBoss();\n        await attackTxn.wait();\n        console.log('attackTxn:', attackTxn);\n        setAttackState('hit');\n        /*\n        * Set your toast state to true and then false 5 seconds later\n        */\n        setShowToast(true);\n        setTimeout(() => {\n          setShowToast(false);\n        }, 5000);\n      }\n    } catch (error) {\n      console.error('Error attacking boss:', error);\n      setAttackState('');\n    }\n  };\n  \n  // UseEffects\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        metaverseSlayerGame.abi,\n        signer\n      );\n\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []);\n\n  useEffect(() => {\n    /*\n     * Setup async function that will get the boss from our contract and sets in state\n     */\n    const fetchBoss = async () => {\n      const bossTxn = await gameContract.getBigBoss();\n      console.log('Boss:', bossTxn);\n      setBoss(transformCharacterData(bossTxn));\n    };\n  \n    /*\n    * Setup logic when this event is fired off\n    */\n    const onAttackComplete = (newBossHp, newPlayerHp) => {\n      const bossHp = newBossHp.toNumber();\n      const playerHp = newPlayerHp.toNumber();\n\n      console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\n\n      /*\n      * Update both player and boss Hp\n      */\n      setBoss((prevState) => {\n          return { ...prevState, hp: bossHp };\n      });\n\n      setCharacterNFT((prevState) => {\n          return { ...prevState, hp: playerHp };\n      });\n    };\n\n    if (gameContract) {\n      /*\n       * gameContract is ready to go! Let's fetch our boss\n       */\n      fetchBoss();\n      gameContract.on('AttackComplete', onAttackComplete);\n    }\n\n    /*\n    * Make sure to clean up this event when this component is removed\n    */\n    return () => {\n      if (gameContract) {\n          gameContract.off('AttackComplete', onAttackComplete);\n      }\n    }\n  }, [gameContract]);  \n\n  return (\n    <div className=\"arena-container\">\n      {boss && characterNFT && (\n        <div id=\"toast\" className={showToast ? 'show' : ''}>\n          <div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\n        </div>\n      )}\n      {boss && (\n        <div className=\"boss-container\">\n          <div className={`boss-content ${attackState}`}>\n            <h2>🔥 {boss.name} 🔥</h2>\n            <div className=\"image-content\">\n              <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\n              <div className=\"health-bar\">\n                <progress value={boss.hp} max={boss.maxHp} />\n                <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"attack-container\">\n            <button className=\"cta-button\" onClick={runAttackAction}>\n              {`💥 Attack ${boss.name}`}\n            </button>\n          </div>\n          {attackState === 'attacking' && (\n            <div className=\"loading-indicator\">\n              <LoadingIndicator />\n              <p>Attacking ⚔️</p>\n            </div>\n          )}\n        </div>\n      )}\n\n      {characterNFT && (\n        <div className=\"players-container\">\n          <div className=\"player-container\">\n            <h2>Your Character</h2>\n            <div className=\"player\">\n              <div className=\"image-content\">\n                <h2>{characterNFT.name}</h2>\n                <img\n                  src={characterNFT.imageURI}\n                  alt={`Character ${characterNFT.name}`}\n                />\n                <div className=\"health-bar\">\n                  <progress value={characterNFT.hp} max={characterNFT.maxHp} />\n                  <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\n                </div>\n              </div>\n              <div className=\"stats\">\n                <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\n              </div>\n            </div>\n          </div>\n          {/* <div className=\"active-players\">\n            <h2>Active Players</h2>\n            <div className=\"players-list\">{renderActivePlayersList()}</div>\n          </div> */}\n\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Arena;\n","import React, { useEffect, useState } from 'react';\nimport githubLogo from './assets/github-logo.svg'\nimport './App.css';\nimport SelectCharacter from './Components/SelectCharacter';\nimport { CONTRACT_ADDRESS, transformCharacterData } from './utils/constants';\nimport metaverseSlayerGame from './utils/MetaverseSlayerGame.json';\nimport { ethers } from 'ethers';\nimport Arena from './Components/Arena';\nimport LoadingIndicator from './Components/LoadingIndicator';\n\nconst GITHUB_HANDLE = 'ashutoshsaboo';\nconst GITHUB_LINK = `https://github.com/${GITHUB_HANDLE}`;\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [characterNFT, setCharacterNFT] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      /*\n      * First make sure we have access to window.ethereum\n      */\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log('Make sure you have MetaMask!');\n        /*\n         * We set isLoading here because we use return in the next line\n         */\n        setIsLoading(false);\n        return;\n      } else {\n        console.log('We have the ethereum object', ethereum);\n        /*\n        * Check if we're authorized to access the user's wallet\n        */\n        const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n        /*\n        * User can have multiple authorized accounts, we grab the first one if its there!\n        */\n        if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log('Found an authorized account:', account);\n          setCurrentAccount(account);\n        } else {\n          console.log('No authorized account found');\n        }\n      }\n    } catch(error) {\n      console.error(error);\n    }\n    /*\n    * We release the state property after all the function logic\n    */\n    setIsLoading(false);\n  };\n\n  // Render Methods\n  const renderContent = () => {\n    /*\n    * If the app is currently loading, just render out LoadingIndicator\n    */\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n    /*\n    * Scenario #1\n    */\n    if (!currentAccount) {\n      return (\n        <div className=\"connect-wallet-container\">\n          <img\n            src=\"https://64.media.tumblr.com/tumblr_mbia5vdmRd1r1mkubo1_500.gifv\"\n            alt=\"Monty Python Gif\"\n          />\n          <button\n            className=\"cta-button connect-wallet-button\"\n            onClick={connectWalletAction}\n          >\n            Connect Wallet To Get Started\n          </button>\n        </div>\n      );\n      /*\n      * Scenario #2\n      */\n    } else if (currentAccount && !characterNFT) {\n      return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\n    }\telse if (currentAccount && characterNFT) {\n      /*\n      * If there is a connected wallet and characterNFT, it's time to battle!\n      */      \n      return <Arena characterNFT={characterNFT} setCharacterNFT={setCharacterNFT} />;\n    }\n  \n  };\n\n  const connectWalletAction = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert('Get MetaMask!');\n        return;\n      }\n\n      /*\n       * Fancy method to request access to account.\n       */\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n\n      /*\n       * Boom! This should print out public address once we authorize Metamask.\n       */\n      console.log('Connected', accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  /*\n   * This runs our function when the page loads.\n   */\n  useEffect(() => {\n    /*\n    * Anytime our component mounts, make sure to immiediately set our loading state\n    */\n    setIsLoading(true);\n    checkIfWalletIsConnected();\n  }, []);\n\n  useEffect(() => {\n    /*\n    * The function we will call that interacts with out smart contract\n    */\n    const fetchNFTMetadata = async () => {\n      console.log('Checking for Character NFT on address:', currentAccount);\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        metaverseSlayerGame.abi,\n        signer\n      );\n      console.log('Game contract: ', gameContract);\n\n      const txn = await gameContract.checkIfUserHasNFT();\n      console.log('Transaction checkIfUserHasNFT on smart contract: ', txn);\n      if (txn.name) {\n        console.log('User has character NFT from retrieved txn: ', txn);\n        setCharacterNFT(transformCharacterData(txn));\n      } else {\n        console.log('No character NFT found');\n      }\n      /*\n      * Once we are done with all the fetching, set loading state to false\n      */\n      setIsLoading(false);\n    };\n\n    /*\n    * We only want to run this, if we have a connected wallet\n    */\n    if (currentAccount) {\n      console.log('CurrentAccount:', currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n\n  \n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">⚔️ Metaverse Slayer ⚔️</p>\n          <p className=\"sub-text\">Team up to protect the Metaverse!</p>\n          {renderContent()}          \n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Github Logo\" className=\"twitter-logo\" src={githubLogo} />\n          <a\n            className=\"footer-text\"\n            href={GITHUB_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${GITHUB_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}